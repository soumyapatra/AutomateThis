"""
Author: Soumyaranjan Patra(soumyapatra9403@gmail.com)
This script is used for tagging resources by reading the csv file.
This is only compatiable with the csv file generated by script
missing_tags.py with tag
USAGE:
python read_csv_n_apply_tags.py -f <csv file full path> --dry-run
dry-run is used for printing the changes without modifying the tags.
"""

import os
import re
import pandas as pd
import boto3
from botocore.exceptions import ClientError
import argparse

parser = argparse.ArgumentParser(description="Read CSV and tag resources based on column value")
parser.add_argument("-f", "--csv-file", type=str, help="CSV file path", required=True)
parser.add_argument(
    '--dry-run',
    action='store_true',
    help='Perform a dry run without making any changes.'
)

args = parser.parse_args()

home_dir = os.path.expanduser('~')
file_path = args.csv_file
REGION = "ap-south-1"


def tag_elasticache_cluster(cluster_id, role_name, tag_key, tag_value, region=REGION):
    session = boto3.Session(profile_name=role_name, region_name=region)
    account_id = session.client('sts').get_caller_identity().get('Account')
    client = session.client('elasticache')

    try:
        resource_arn = f"arn:aws:REDACTED"
        response = client.list_tags_for_resource(
            ResourceName=resource_arn
        )
        current_tags = {tag['Key']: tag['Value'] for tag in response['TagList']}
    except Exception as e:
        print(f"Error retrieving tags for cluster {cluster_id}: {e}")
        return

    if tag_key in current_tags and current_tags[tag_key] == tag_value:
        print(f"Tag '{tag_key}' with value '{tag_value}' already exists for cluster {cluster_id}.")
        return

    try:
        if not args.dry_run:
            response = client.add_tags_to_resource(
                ResourceName=resource_arn,
                Tags=[{'Key': tag_key, 'Value': tag_value}]
            )
        print(f"Successfully tagged cluster {cluster_id} with {tag_key}: {tag_value}")
    except Exception as e:
        print(f"Error tagging cluster {cluster_id}: {e}")


def tag_instance(instance_id, role_name, tag_key, tag_value, region=REGION):
    session = boto3.Session(profile_name=role_name, region_name=region)
    ec2 = session.client('ec2', region_name=region)
    try:
        response = ec2.describe_instances(InstanceIds=[instance_id])
        if not response["Reservations"]:
            print(f"No instance with id {instance_id} found")
            return
        instances = response['Reservations'][0]['Instances']
        if not instances:
            print(f"No instance found with ID: {instance_id}")
            return

        instance = instances[0]
        current_tags = instance.get('Tags', [])

        for tag in current_tags:
            if tag['Key'] == tag_key:
                print(f"Tag '{tag_key}' already present with value '{tag['Value']}'.")
                return
            else:
                if not args.dry_run:
                    ec2.create_tags(
                        Resources=[instance_id],
                        Tags=[{'Key': tag_key, 'Value': tag_value}]
                    )
                print(f"Tag '{tag_key}' with value '{tag_value}' added to instance '{instance_id}'.")
                return
    except ClientError as e:
        if e.response["Error"]["Code"] == 'InvalidInstanceID.NotFound':
            print("instance not found")
            return


def tag_kafka(cluster_name, role_name, tag_key, tag_val):
    session = boto3.Session(profile_name=role_name, region_name="ap-south-1")
    kafka_client = session.client("kafka")
    response = kafka_client.list_clusters()
    cluster_arn = None
    for cluster in response["ClusterInfoList"]:
        if cluster['ClusterName'] == cluster_name:
            cluster_arn = cluster['ClusterArn']
            break
    if not cluster_arn:
        print(f"Cluster {cluster_arn} not found")
    tags = {tag_key: tag_val}
    existing_tags_response = kafka_client.list_tags_for_resource(
        ResourceArn=cluster_arn
    )
    existing_tags = existing_tags_response.get('Tags', {})
    if tag_key in existing_tags:
        print(f"Tag {tag_key} already present for {cluster_name}. Not updating")
        return
    else:
        if not args.dry_run:
            response = kafka_client.tag_resource(
                ResourceArn=cluster_arn,
                Tags=tags)
        print(f"Tagged {cluster_name} with {tag_key}: {tag_val}")
        return response


def tag_kafka_connector(connector_name, role_name, tag_key, tag_value):
    session = boto3.Session(profile_name=role_name, region_name=REGION)
    client = session.client('kafkaconnect')
    response = client.list_connectors()
    connector_arn = None
    for connector in response['connectors']:
        if connector['connectorName'] == connector_name:
            connector_arn = connector['connectorArn']
            break

    if not connector_arn:
        print(f"Connector with name {connector_name} not found.")
        return
    existing_tags_response = client.list_tags_for_resource(
        resourceArn=connector_arn
    )
    existing_tags = existing_tags_response.get('tags', {})

    if tag_key in existing_tags:
        print(f"Tag key '{tag_key}' already exists with value '{existing_tags[tag_key]}'. No update performed.")
    else:
        if not args.dry_run:
            client.tag_resource(
                resourceArn=connector_arn,
                tags={tag_key: tag_value}
            )
        print(f"Tag '{tag_key}: {tag_value}' has been added to the connector {connector_name}.")


def tag_rds_instance(db_instance_identifier, role_name, tag_key, tag_value):
    session = boto3.Session(profile_name=role_name, region_name="ap-south-1")
    client = session.client('rds')
    try:
        response = client.describe_db_instances(
            DBInstanceIdentifier=db_instance_identifier
        )

        if not response['DBInstances']:
            print(f"DB instance with identifier {db_instance_identifier} not found.")
            return

        db_instance_arn = response['DBInstances'][0]['DBInstanceArn']

        existing_tags_response = client.list_tags_for_resource(
            ResourceName=db_instance_arn
        )
        existing_tags = {tag['Key']: tag['Value'] for tag in existing_tags_response.get('TagList', [])}

        if tag_key in existing_tags:
            print(f"Tag key '{tag_key}' already exists with value '{existing_tags[tag_key]}'. No update performed.")
        else:
            if not args.dry_run:
                client.add_tags_to_resource(
                    ResourceName=db_instance_arn,
                    Tags=[{'Key': tag_key, 'Value': tag_value}]
                )
            print(f"Tag '{tag_key}: {tag_value}' has been added to the DB instance {db_instance_identifier}.")
    except ClientError as e:
        if e.response['Error']['Code'] == 'DBInstanceNotFound':
            print(f"Error: The RDS instance '{db_instance_identifier}' was not found")


func_map = {"RDS": tag_rds_instance, "Kafka Connector": tag_kafka_connector, "Kafka": tag_kafka,
            "EC2 Instance": tag_instance, "ElastiCache": tag_elasticache_cluster}

df = pd.read_csv(file_path, keep_default_na=False)

for index, row in df.iterrows():
    acct_name = row["Account Name"]
    resource_type = row["Resource Type"]
    resource_id = row["Resource Name(Resource ID)"]
    if resource_type == "EC2 Instance":
        inst_id_re = re.findall(r'\(.*?\)', resource_id)
        resource_id = re.sub(r"[([{})\]]", "", inst_id_re[0])
    service_tag_val = row["service"]
    vertical_tag_val = row["vertical"]
    subvertical_tag_val = row["subvertical"]
    env_tag_val = row["env"]
    component_tag_val = row["component"]
    selected_function = func_map.get(resource_type)
    print(
        f"=========================================\nAccount Name: {acct_name}\nResource Type: {resource_type}\nService Tag: {service_tag_val}\nVertical Tag: {vertical_tag_val}\nSubvertical: {subvertical_tag_val}\nEnv Tag: {env_tag_val}\nComponent Tag: {component_tag_val}\nResource Id: {resource_id}\nSelected Function: {selected_function}")
    if service_tag_val != "":
        selected_function(resource_id, f"{acct_name}-role", "service", service_tag_val)
    if vertical_tag_val != "":
        selected_function(resource_id, f"{acct_name}-role", "vertical", vertical_tag_val)
    if subvertical_tag_val != "":
        selected_function(resource_id, f"{acct_name}-role", "subvertical", subvertical_tag_val)
    if component_tag_val != "":
        selected_function(resource_id, f"{acct_name}-role", "component", component_tag_val)
    if env_tag_val != "":
        selected_function(resource_id, f"{acct_name}-role", "env", env_tag_val)
